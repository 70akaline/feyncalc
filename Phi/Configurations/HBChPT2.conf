(* ************************************************************** *)
(*                                                                *)
(*                      HBChPT2                                   *)
(*                                                                *)
(* ************************************************************** *)

(* 
   Author:              F.Orellana 1999

   Mathematica Version: 3.0 

   Requirements:        FeynCalc > 3, Phi 

   Summary:             Configuration file for the family of
                        Lagrangians HBChPT2 for Phi

   Description:         Definitions for HBChPT lagrangians.
          
                        The definitions follow 
                        G.Ecker and M. Mojzis (1995),
                        hep-ph/9508204
*)

(* ************************************************************** *)

(* Modified box definitions for FeynCalc *)

<<"FCBoxes.m"

(* ************************************************************** *)

(* Usage definitions *)

HighEnergyPhysics`Phi`Objects`ChPT2::"usage"=
"ULagrangian[ChPT2[2]] is the pionic Chiral Perturbation Theory 
lagrangian written in terms of a matrix representation 
of the meson fields to second order in the energy.  ULagrangian[ChPT2[4]]
is the pionic Chiral Perturbation Theory lagrangian 
to four'th order in the energy (first written down by Gasser and 
Leutwyler).  To evaluate use ArgumentsSupply";

HighEnergyPhysics`Phi`Objects`HBChPT2::"usage"=
"ULagrangian[HBChPT2[2]] is the lowest order nucleon-pion 
Chiral Perturbation Theory lagrangian.  To evaluate 
use ArgumentsSupply";

HighEnergyPhysics`Phi`Objects`USmall::"usage"=
"USmall[mu] is the u-field of HBChPT 
(G.Ecker and M. Mojzis (1995), hep-ph/9508204).
To evaluate use ArgumentsSupply.";

HighEnergyPhysics`Phi`Objects`UGamma::"usage"=
"UGamma[mu] is the gamma-field of HBChPT 
(G.Ecker and M. Mojzis (1995), hep-ph/9508204).  
To evaluate use ArgumentsSupply.  
UGamma[x,mu,opts] is the evaluated gamma-field";

HighEnergyPhysics`Phi`Objects`UChiPlus::"usage"=
"UChiPlus[opts] is the chi_plus-field of HBChPT 
(G.Ecker and M. Mojzis (1995), hep-ph/9508204).  
To evaluate use ArgumentsSupply";

HighEnergyPhysics`Phi`Objects`UChiMinus::"usage"=
"UChiMinus[opts] is the chi_minus-field of HBChPT 
(G.Ecker and M. Mojzis (1995), hep-ph/9508204).  
To evaluate use ArgumentsSupply";

HighEnergyPhysics`Phi`Objects`UFMinus::"usage"=
"UFMinus[mu,nu] is the f_minus-field of HBChPT 
(G.Ecker and M. Mojzis (1995), hep-ph/9508204).  
To evaluate use ArgumentsSupply";

HighEnergyPhysics`Phi`Objects`UFPlus::"usage"=
"UFPlus[mu,nu] is the f_plus-field of HBChPT 
(G.Ecker and M. Mojzis (1995), hep-ph/9508204).  
To evaluate use ArgumentsSupply";

HighEnergyPhysics`Phi`Objects`UVTensor::"usage"=
"UVTensor[mu,nu] is the v-tensor of HBChPT 
(G.Ecker and M. Mojzis (1995), hep-ph/9508204).  
It uses the Vector[1].  
To evaluate use ArgumentsSupply";


(* ************************************************************** *)

(* Box definitions *)

ClearAll[Vector,AxialVector];

Vector/:MakeBoxes[Vector[1],TraditionalForm]:=
  SuperscriptBox[MakeBoxes[
  StyleForm["v",FontSlant->"Italic"]][[1]],"(s)"];

Vector/:MakeBoxes[Vector[_],TraditionalForm]:=
  MakeBoxes[StyleForm["v",FontSlant->"Italic"]];

AxialVector/:MakeBoxes[AxialVector[_],TraditionalForm]:=
  MakeBoxes[StyleForm["a",FontSlant->"Italic"]];

SetFAField/@{Vector,AxialVector};

SetAttributes[Vector,NumericFunction];
SetAttributes[AxialVector,NumericFunction];

VariableBoxes["J",ParticlesNumber->12];

(* ************************************************************** *)

(* Attributes and data types *)

SetAttributes[HBChPT2, NumericFunction];
DeclareNonCommutative[UVector, MM, SMM];

(* ************************************************************** *)


(* Source fields *)

(* The scalar source is set to the quark mass matrix *)

QuantumField[Particle[
Scalar[0],ar___RenormalizationState,
br___RenormalizationScheme,cr___ExpansionState,
opts___Rule|opts___List],SUNIndex[0]][x_]:=
ParticleMass[Pion,ar,br,cr,opts]^2/(2*QuarkCondensate[ar,br,cr,opts]);
                        
(* ************************************************************** *)

(* Adjoints and conjugates *)

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___][_]] = p;

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___]] = p;

Unprotect[Conjugate];

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___][_]] = p;

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___]] = p;

Protect[Conjugate];

(* ************************************************************** *)

(* Antiparticles *)

ChargeConjugate[Pion] = Pion;
ChargeConjugate[Vector[0]] = Vector[0];
ChargeConjugate[AxialVector[0]] = AxialVector[0];
ChargeConjugate[Scalar[0]] = Scalar[0];
ChargeConjugate[Scalar[1]] = Scalar[1];
ChargeConjugate[PseudoScalar[0]] = PseudoScalar[0];
ChargeConjugate[PseudoScalar[1]] = PseudoScalar[1];
ChargeConjugate[PionPlus] = PionMinus;
ChargeConjugate[PionMinus] = PionPlus;
ChargeConjugate[PionZero] = PionZero;
ChargeConjugate[KaonMinus] = KaonPlus;
ChargeConjugate[KaonPlus] = KaonMinus;
ChargeConjugate[KaonZero] = KaonZeroBar;
ChargeConjugate[KaonZeroBar] = KaonZero;
ChargeConjugate[EtaMeson] = EtaMeson;

(* ************************************************************** *)

(* Constants *)

(* When calculating infrared divergences, the photon mass
   should not be set to zero *)

ParticleMass[Photon,___]:=0;
ParticleMass[Photon[0],___]:=0;

(*UCouplingConstant[ChPT2[4],1,___][___]=0;
UCouplingConstant[ChPT2[4],2,___][___]=0;
UCouplingConstant[ChPT2[4],3,___][___]=0;
UCouplingConstant[ChPT2[4],4,___][___]=0;
UCouplingConstant[ChPT2[4],5,___][___]=0;
UCouplingConstant[ChPT2[4],6,___][___]=0;*)
UCouplingConstant[ChPT2[4],7,___][___]=0;
(*UCouplingConstant[ChPT2[4],8,___][___]=0;*)
UCouplingConstant[ChPT2[4],9,___][___]=0;
UCouplingConstant[ChPT2[4],10,___][___]=0;
UCouplingConstant[ChPT2[4],11,___][___]=0;
UCouplingConstant[ChPT2[4],12,___][___]=0;

(* ************************************************************** *)

(* Redefinition of the left and right components
   G.Ecker and M. Mojzis have them the other way round *)

IsoVector[QuantumField[aa___, Particle[LeftComponent[a_],i___],
bb___],opts___][x_]:=1/2*(
IsoVector[QuantumField[aa, Particle[Vector[a],i],bb],opts][x]-
IsoVector[QuantumField[aa, Particle[AxialVector[a],i],bb],opts][x]);

IsoVector[QuantumField[aa___, Particle[RightComponent[a_],i___],bb___],
opts___][x_]:=1/2*(
  IsoVector[QuantumField[aa, Particle[Vector[a],i],bb],opts][x]+
  IsoVector[QuantumField[aa, Particle[AxialVector[a],i],bb],opts][x]);

QuantumField[aa___, Particle[LeftComponent[a_],i___],bb___][x_]:=
  1/2*(QuantumField[aa, Particle[Vector[a],i],bb][x]-
        QuantumField[aa, Particle[AxialVector[a],i],bb][x]);

QuantumField[aa___, Particle[RightComponent[a_],i___],bb___][x_]:=
  1/2*(QuantumField[aa, Particle[Vector[a],i],bb][x]+
        QuantumField[aa, Particle[AxialVector[a],i],bb][x]);

(* ************************************************************** *)

(* The u_mu field *)

USmall[mu_]:=

I*NM[Adjoint[SMM],FDr[SMM,{mu}]]+

NM[Adjoint[SMM],
QuantumField[Particle[RightComponent[0]],{mu}],SMM]-

I*NM[SMM,FDr[Adjoint[SMM],{mu}]]-

NM[SMM,
QuantumField[Particle[LeftComponent[0]],{mu}],Adjoint[SMM]];

(* ************************************************************** *)

(* The Gamma_mu field *)

UGamma[mu_]:=

1/2*(

NM[Adjoint[SMM],FDr[SMM,{mu}]]-

I*NM[Adjoint[SMM],
QuantumField[Particle[RightComponent[0]],{mu}],SMM]+

NM[SMM,FDr[Adjoint[SMM],{mu}]]-

I*NM[SMM,
QuantumField[Particle[LeftComponent[0]],{mu}],Adjoint[SMM]]

);

UGamma[x_,mu_,(opts___Rule|opts___List)]:=

1/2*(

NM[Adjoint[SMM[x,RenormalizationState[0],opts]],
FDr[SMM[x,RenormalizationState[0],opts],x,{mu}]]-

I*NM[Adjoint[SMM[x,RenormalizationState[0],opts]],
QuantumField[Particle[RightComponent[0],
RenormalizationState[0]],{mu}][x],
SMM[x,RenormalizationState[0],opts]]+

NM[SMM[x,RenormalizationState[0],opts],
FDr[Adjoint[SMM[x,RenormalizationState[0],opts]],x,{mu}]]-

I*NM[SMM[x,RenormalizationState[0],opts],
QuantumField[Particle[LeftComponent[0],
RenormalizationState[0]],{mu}][x],
Adjoint[SMM[x,RenormalizationState[0],opts]]]

);


(* ************************************************************** *)

(* The Chi_plus/Chi_minus fields *)

UChiPlus[opts_]:=

NM[Adjoint[SMM],UChi,Adjoint[SMM]]+NM[SMM,Adjoint[UChi],SMM];

UChiMinus[opts_]:=

NM[Adjoint[SMM],UChi,Adjoint[SMM]]-NM[SMM,Adjoint[UChi],SMM];

(* ************************************************************** *)

(* Redefinition of the field strength tensor: -I instead of I *)

FST[p_,mu_HighEnergyPhysics`FeynCalc`LorentzIndex`LorentzIndex,
    nu_HighEnergyPhysics`FeynCalc`LorentzIndex`LorentzIndex,x_,
    a___RenormalizationState,
    b___RenormalizationScheme,(opts___Rule|opts___List)]:=
  FieldStrengthTensor[mu,
UGeneratorMatrixIsoDotFull[QuantumField[
Particle[p,a,b],nu][x],opts],x]-2*I*
      UGeneratorMatrixIsoDotFull[
        IsoCross[(
              IsoVector[QuantumField[Particle[p,a,b],mu],##]&@@
                OptionsSelect[IsoVector,opts])[
            x],(IsoVector[QuantumField[Particle[p,a,b],nu],##]&@@
                OptionsSelect[IsoVector,opts])[x]],opts];

(* ************************************************************** *)

(* The f_plus/f_minus fields.
   The fields Vector[0] and AxialVector[0] are used *)

UFPlus[mu_,nu_]:=

NM[SMM,FST[LeftComponent[0],{mu},{nu}],Adjoint[SMM]]+

NM[Adjoint[SMM],FST[RightComponent[0],{mu},{nu}],SMM];

UFMinus[opts_]:=

NM[SMM,FST[LeftComponent[0],{mu},{nu}],Adjoint[SMM]]-

NM[Adjoint[SMM],FST[RightComponent[0],{mu},{nu}],SMM];

(* ************************************************************** *)

(* The iso-singlet v field.
   The field Vector[1] is used *)

UVTensor[mu_,nu_]:=
UIdentityMatrix*
FieldStrengthTensor[{mu},
QuantumField[Particle[Vector[1]],{nu}]];

(* ************************************************************** *)

(* The covariant derivative *)

Options[CovariantFieldDerivative]=
{DiagonalToU->True,
RemoveIntegerIndices->True,
GaugeGroup->2,UDimension->Automatic,
ExpansionOrder->2,DropOrder->2};

CovariantFieldDerivative[aa_,x_,{loris__},rest___] :=
CovariantFieldDerivative[aa,x,##,rest]&@@
HighEnergyPhysics`FeynCalc`LorentzIndex`LorentzIndex/@{loris};

(* -------------------------------------------------------------- *)

CovariantFieldDerivative[aa_,x_,
lori_HighEnergyPhysics`FeynCalc`LorentzIndex`LorentzIndex,
ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)] :=
(
ggu=(GaugeGroup/.Options[UMatrix]);
ggi=(GaugeGroup/.Options[IsoVector]);
ggg=(GaugeGroup/.Options[CovariantFieldDerivative]);

SetOptions[UMatrix,GaugeGroup->ggg];
SetOptions[IsoVector,GaugeGroup->ggg];


cfdr=(UIdentityMatrix[##]&@@OptionsSelect[UMatrix,opts]).
      FieldDerivative[aa,x,lori]+
      
((UGamma[x,lori[[1]],##]&@@Join[Flatten[{opts}],
Select[{DiagonalToU->True,
ExpansionOrder->2,DropOrder->2},
FreeQ[Part[#,1]&/@Flatten[{opts}],#[[1]]]&]])-

I*(UIdentityMatrix[##]&@@OptionsSelect[UMatrix,opts])*
      QuantumField[Particle[Vector[1]],lori][x]).aa;
      
SetOptions[UMatrix,GaugeGroup->ggu];
SetOptions[IsoVector,GaugeGroup->ggi];

cfdr
);
      
(* ************************************************************** *)

(* Re-setting of options and $-variables *)

$UParticlesInUse={Pion,Nucleon,Vector[1],Vector[0],AxialVector[0]};

$ExpansionQuantities=Join[$ExpansionQuantities,
{UCouplingConstant[HBChPT2[2],a___],
FADiracMatrix[_],HighEnergyPhysics`FeynArts`FANonCommutative[FADiracMatrix[_]..]}];

$PropagatorMassesStates={Pion[0]->{RenormalizationState[0]},
    Nucleon[0]->{RenormalizationState[0]},
    AxialVector[0][0]->{RenormalizationState[0]},
    Vector[0]->{RenormalizationState[0]},
    Photon[0]->{RenormalizationState[0]}};

$CouplingIsoIndicesSpecifications =
   {Pion[0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}},
    Nucleon[0]->{{IsoRange->{1,2},IsoIndicesString->"J"}},
    AxialVector[0][0]->{{IsoRange->{1,2,3},IsoIndicesString->"II"}},
   Vector[0][0]->{{IsoRange->{1,2,3},IsoIndicesString->"II"}}};
   
$MixingFields=
   {};
   
$InsertOnly=
   {(*Vector[0][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External},
    AxialVector[0][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External},
   Photon[0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External}*)};
    
(* ************************************************************** *)
