(* ************************************************************** *)
(*                                                                *)
(*                      ChPTVirtualPhotons2                       *)
(*                                                                *)
(* ************************************************************** *)

(* 
   Author:              F.Orellana 2001

   Mathematica Version: 4.0 

   Requirements:        FeynCalc > 3, Phi 

   Summary:             Configuration file for the family of
                        lagrangians ChPTVirtualPhotons2 for Phi

   Description:         Definitions for standard ChPT lagrangians
                        with virtual photons.
    
                        The definitions follow
                        Marc Knecht and Res Urech
                        (1997), hep-ph/9709348
*)

(* ************************************************************** *)

(* Modified box definitions for FeynCalc *)

<<"FCBoxes.m"

(* ************************************************************** *)

(* Usage definitions *)

HighEnergyPhysics`Phi`Objects`ChPTVirtualPhotons2::"usage"=
"ULagrangian[ChPTVirtualPhotons2[2] is the pionic Chiral 
Perturbation Theory lagrangian with couplings to virtual photons 
written in terms of a matrix
representation of the meson fields to second order in the energy
and the electron charge";

HighEnergyPhysics`Phi`Objects`GRight::"usage"=
"GRight[mu] is the right-handed G field of \
(M. Knecht and R. Urech (1997), hep-ph/9709348). \
With two arguments it's the field strength tensor";

HighEnergyPhysics`Phi`Objects`GLeft::"usage"=
"GLeft[mu] is the left-handed G field of \
(M. Knecht and R. Urech (1997), hep-ph/9709348) \
With two arguments it's the field strength tensor";

HighEnergyPhysics`Phi`Objects`CQRight::"usage"=
"GRight[mu] is the covariant derivative of the right-handed \
Q source of \
(M. Knecht and R. Urech (1997), hep-ph/9709348). \
With two arguments it's the field strength tensor";

HighEnergyPhysics`Phi`Objects`CQLeft::"usage"=
"GLeft[mu] is the covariant derivative of the Left-handed \
Q source of \
(M. Knecht and R. Urech (1997), hep-ph/9709348). \
With two arguments it's the field strength tensor";

(* ************************************************************** *)

(* Attributes and data types *)

SetAttributes[ChPTVirtualPhotons2, NumericFunction];

(* ************************************************************** *)

(* Source fields *)

IsoVector[QuantumField[Particle[Scalar[0],___],___],___][_]:=0;
IsoVector[QuantumField[Particle[PseudoScalar[0],___],___],___][_]:=0;
IsoVector[QuantumField[Particle[Vector[0],___],___],___][_]:=0;
(*IsoVector[QuantumField[Particle[AxialVector[0],___],___],___][_]:=0;*)

(* The scalar source is set to the quark mass matrix *)

QuantumField[Particle[Scalar[0],st___RenormalizationState,
sc___RenormalizationScheme,qs___ExpansionState,
opts___Rule|opts___List],SUNIndex[0]][x_]:=
UQuarkMassMatrix[st,sc,qs,opts];
QuantumField[___,Particle[PseudoScalar[0],___],___][_]:=0;
QuantumField[___,Particle[Vector[0],___],___][_]:=0;
(*QuantumField[___,Particle[AxialVector[0],___],___][_]:=0;*)
QuantumField[Particle[AxialVector[0], ___], ___, SUNIndex[0]][_]:=0;

(* To simplify algebra, above we set the iso-vector components
   of the vector and axial-vector sources to zero and below
   we identify the iso-spin zero or iso-scalar component of the
   vector field with the photon field of the covariant derivative
   below *)

QuantumField[a___,Particle[Vector[1],b___],c___,SUNIndex[0]][x_]:=
QuantumField[a,Particle[Vector[1],b],c][x];

(* ************************************************************** *)

(* Adjoints and conjugates *)

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___][_]] = p;

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___]] = p;

Unprotect[Conjugate];

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___][_]] = p;

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___]] = p;

Protect[Conjugate];

(* ************************************************************** *)

(* Antiparticles *)

ChargeConjugate[Pion] = Pion;
ChargeConjugate[Vector[0]] = Vector[0];
ChargeConjugate[AxialVector[0]] = AxialVector[0];
ChargeConjugate[Scalar[0]] = Scalar[0];
ChargeConjugate[Scalar[1]] = Scalar[1];
ChargeConjugate[PseudoScalar[0]] = PseudoScalar[0];
ChargeConjugate[PseudoScalar[1]] = PseudoScalar[1];
ChargeConjugate[PionPlus] = PionMinus;
ChargeConjugate[PionMinus] = PionPlus;
ChargeConjugate[PionZero] = PionZero;
ChargeConjugate[KaonMinus] = KaonPlus;
ChargeConjugate[KaonPlus] = KaonMinus;
ChargeConjugate[KaonZero] = KaonZeroBar;
ChargeConjugate[KaonZeroBar] = KaonZero;
ChargeConjugate[EtaMeson] = EtaMeson;

(* ************************************************************** *)

(* Constants *)

(* When calculating infrared divergences, the photon mass
   should not be set to zero *)

(*ParticleMass[Photon,___]:=0;
ParticleMass[Photon[0],___]:=0;*)

(*UCouplingConstant[ChPTPhoton2[4],1,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],2,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],3,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],4,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],5,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],6,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],7,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],8,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],9,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],10,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],11,___][___]=0;
UCouplingConstant[ChPTPhoton2[4],12,___][___]=0;*)

(* ************************************************************** *)

(* Redefinition of the left and right components.
   Knecht and Urech have them the other way round and without the 1/2.
   Also its necessary in order to not have the AxialVector (Vector)
   part set to zero *)

IsoVector[QuantumField[aa___, Particle[LeftComponent[a_],i___],
bb___],opts___][x_]:=(
IsoVector[QuantumField[aa, Particle[Vector[a],i],bb],opts][x]-
IsoVector[QuantumField[aa, Particle[AxialVector[a],i],bb],opts][x]);

IsoVector[QuantumField[aa___, Particle[RightComponent[a_],i___],bb___],
opts___][x_]:=(
  IsoVector[QuantumField[aa, Particle[Vector[a],i],bb],opts][x]+
  IsoVector[QuantumField[aa, Particle[AxialVector[a],i],bb],opts][x]);

QuantumField[aa___, Particle[LeftComponent[a_],i___],bb___][x_]:=
  (QuantumField[aa, Particle[Vector[a],i],bb][x]-
        QuantumField[aa, Particle[AxialVector[a],i],bb][x]);

QuantumField[aa___, Particle[RightComponent[a_],i___],bb___][x_]:=
  (QuantumField[aa, Particle[Vector[a],i],bb][x]+
        QuantumField[aa, Particle[AxialVector[a],i],bb][x]);

(* ************************************************************** *)

(* The G fields *)

GRight[mu_] := UGeneratorMatrixIsoDotFull[QuantumField[
                 Particle[RightComponent[0]],{mu}]]+
               NM[UMatrix[UChiralSpurionRight],
                 QuantumField[Particle[Photon],{mu}]];

GLeft[mu_] := UGeneratorMatrixIsoDotFull[QuantumField[
                 Particle[LeftComponent[0]],{mu}]]+
               NM[UMatrix[UChiralSpurionLeft],
                 QuantumField[Particle[Photon],{mu}]];
                 
GRight[mu_, nu_] := FieldDerivative[GRight[nu], {mu}] -
                   FieldDerivative[GRight[mu], {nu}] -
  I*(NM[GRight[mu], GRight[nu]] - NM[GRight[nu], GRight[mu]]);

GLeft[mu_, nu_] := FieldDerivative[GLeft[nu], {mu}] -
                   FieldDerivative[GLeft[mu], {nu}] -
  I*(NM[GLeft[mu], GLeft[nu]] - NM[GLeft[nu], GLeft[mu]]);
  
CQRight[mu_] := FieldDerivative[UMatrix[UChiralSpurionRight],{mu}]-
                I*(NM[GRight[mu], UMatrix[UChiralSpurionRight]]-
                   NM[UMatrix[UChiralSpurionRight], GRight[mu]]);

CQLeft[mu_] := FieldDerivative[UMatrix[UChiralSpurionLeft],{mu}]-
                I*(NM[GLeft[mu], UMatrix[UChiralSpurionLeft]]-
                   NM[UMatrix[UChiralSpurionLeft], GLeft[mu]]);
(* ************************************************************** *)

(* The covariant derivative *)

CovariantFieldDerivative[aa_,x_,{loris__},rest___] :=
CovariantFieldDerivative[aa,x,##,rest]&@@
HighEnergyPhysics`FeynCalc`LorentzIndex`LorentzIndex/@{loris};

(* -------------------------------------------------------------- *)

(* EM-ChPT - Knecht & Urech *)

CovariantFieldDerivative[aa_,x_,lori_fcli,
ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)] :=

FieldDerivative[aa,x,lori] +

I*NM[UGeneratorMatrixIsoDotFull[QuantumField[Particle[
LeftComponent[0],ar,br],lori][x],opts],aa] -

I*NM[aa,UGeneratorMatrixIsoDotFull[QuantumField[Particle[
RightComponent[0],ar,br],lori][x],opts]]-

I*
NM[UQuarkChargeMatrix[ar,br,cr,opts],
QuantumField[Particle[Photon,ar,br],lori][x],aa]+

I*
NM[aa,UQuarkChargeMatrix[ar,br,cr,opts],
QuantumField[Particle[Photon,ar,br],lori][x]];

(* ************************************************************** *)
(* Modify the photon propagator to general Lorentz gange *)

HighEnergyPhysics`Phi`Couplings`GenProps[a:Vector1] :=
{HighEnergyPhysics`FeynArts`AnalyticalPropagator[
HighEnergyPhysics`FeynArts`External][s a[i, mom, {li2}]] == 
FAPolarizationVector[a[i], mom, li2], 
HighEnergyPhysics`FeynArts`AnalyticalPropagator[
HighEnergyPhysics`FeynArts`Internal][s a[i, mom, {li1} -> {li2}]] == 
I*PropagatorDenominator[mom, HighEnergyPhysics`FeynArts`Mass[a[i]]]*
(-FAMetricTensor[li1, li2] +
(1 - 1/GaugeFixingParameter)*
FourVector[mom, li1]*FourVector[mom, li2]*
1/(PropagatorDenominator1[mom, HighEnergyPhysics`FeynArts`Mass[a[i]]])
)};
		  		  
(* ************************************************************** *)

(* Re-setting of options and $-variables *)

$ExpansionQuantities=Union[$ExpansionQuantities,{FAMetricTensor[__],Pair[__]}];

$UParticlesInUse={Pion,Kaon,Photon(*,Vector[0],AxialVector[0]*)};

$PropagatorMassesStates={Pion[0]->{RenormalizationState[0]},
    Kaon[0]->{RenormalizationState[0]},
    AxialVector[0][0]->{RenormalizationState[0]},
    Vector[0][0]->{RenormalizationState[0]},
    Photon[0]->{RenormalizationState[0]}};

$CouplingIsoIndicesSpecifications =
   {Pion[0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}},
    Kaon[0]->{{IsoRange->{1,2},IsoIndicesString->"J"}},
    AxialVector[0][0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}},
   Vector[0][0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}}};

$MixingFields=
   {};

$InsertOnly=
   {(*Vector[0][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External},
    AxialVector[0][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External},
   Photon[0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External}*)};

(* ************************************************************** *)
