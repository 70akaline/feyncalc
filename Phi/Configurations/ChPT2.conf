(* ************************************************************** *)
(*                                                                *)
(*                      ChPT2.conf                                *)
(*                                                                *)
(* ************************************************************** *)

(* 
   Author:              F.Orellana 1998

   Mathematica Version: 3.0 

   Requirements:        FeynCalc > 3, Phi 

   Summary:             Configuration file for the family of
                        Lagrangians ChPT2 for Phi

   Description:         Definitions for standard ChPT lagrangians.
    
                        The definitions follow
                        J.F. Donoghue, E. Golowich
                        and B.R. Holstein (1992), "Dynamics of
                        the Standard Model", Cambridge
*)

(* ************************************************************** *)

(* Modified box definitions for FeynCalc *)

<<"FCBoxes.m"

(* ************************************************************** *)

(* Usage definitions *)

HighEnergyPhysics`Phi`Objects`ChPT2::"usage"=
"ChPT22 := ChPT2[2] is the pionic Chiral Perturbation Theory 
lagrangian written in terms of a matrix representation 
of the meson fields to second order in the energy.  ChPT24 
:= ChPT[2,4] is the pionic Chiral Perturbation Theory lagrangian 
to four'th order in the energy (first written down by Gasser and 
Leutwyler).  To evaluate use ArgumentsSupply";

(* ************************************************************** *)

(* Attributes and data types *)

SetAttributes[ChPT2, NumericFunction];

(* ************************************************************** *)

(* Source fields *)

(* The setting below expands the zero'th Scalar[0]
   source around the quark mass. The Scalar[1] source is
   then the perturbation. Iso-spin breaking and pseudo-scalar
   sources can be controlled by (un)setting the relevant sources
   to zero *)

QuantumField[Particle[
Scalar[0],ar___RenormalizationState,
br___RenormalizationScheme,cr___ExpansionState,
opts___Rule|opts___List],SUNIndex[0]][x_]:=
ParticleMass[Pion,ar,br,cr]^2/
(2*QuarkCondensate[ar,br,cr,Sequence@@OptionsSelect[QuarkCondensate,opts]])+
QuantumField[Particle[Scalar[1],ar,br,cr,
   Sequence@@OptionsSelect[Particle,opts]],
SUNIndex[0]][x];
                        
(* Sources are set to zero *)

IsoVector[
QuantumField[Particle[Scalar[0],___],___],___][_]:=0;
IsoVector[
QuantumField[Particle[PseudoScalar[0],___],___],___][_]:=0;
IsoVector[
QuantumField[Particle[Vector[0],___],___],___][_]:=0;
(*IsoVector[
QuantumField[Particle[AxialVector[0],___],___],___][_]:=0;*)

QuantumField[___,Particle[PseudoScalar[0],___],___][_]:=0;
QuantumField[___,Particle[Vector[0],___],___][_]:=0;
QuantumField[___,Particle[AxialVector[0],___],___,
SUNIndex[0],___][_]:=0;

(* ************************************************************** *)

(* Adjoints and conjugates *)

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___][_]] = p;

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___]] = p;

Unprotect[Conjugate];

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___][_]] = p;

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2],___],___]] = p;

Protect[Conjugate];

(* ************************************************************** *)

(* Antiparticles *)

ChargeConjugate[Pion] = Pion;
ChargeConjugate[Vector[0]] = Vector[0];
ChargeConjugate[AxialVector[0]] = AxialVector[0];
ChargeConjugate[Scalar[0]] = Scalar[0];
ChargeConjugate[Scalar[1]] = Scalar[1];
ChargeConjugate[PseudoScalar[0]] = PseudoScalar[0];
ChargeConjugate[PseudoScalar[1]] = PseudoScalar[1];
ChargeConjugate[PionPlus] = PionMinus;
ChargeConjugate[PionMinus] = PionPlus;
ChargeConjugate[PionZero] = PionZero;
ChargeConjugate[KaonMinus] = KaonPlus;
ChargeConjugate[KaonPlus] = KaonMinus;
ChargeConjugate[KaonZero] = KaonZeroBar;
ChargeConjugate[KaonZeroBar] = KaonZero;
ChargeConjugate[EtaMeson] = EtaMeson;

(* ************************************************************** *)

(* Constants *)

(* When calculating infrared divergences, the photon mass
   should not be set to zero *)

ParticleMass[Photon,___]:=0;
ParticleMass[Photon[0],___]:=0;

(*UCouplingConstant[ChPT2[4],1,___]=0;
UCouplingConstant[ChPT2[4],2,___]=0;
UCouplingConstant[ChPT2[4],3,___]=0;
UCouplingConstant[ChPT2[4],4,___]=0;
UCouplingConstant[ChPT2[4],5,___]=0;
UCouplingConstant[ChPT2[4],6,___]=0;
UCouplingConstant[ChPT2[4],7,___]=0;
UCouplingConstant[ChPT2[4],8,___]=0;
UCouplingConstant[ChPT2[4],9,___]=0;
UCouplingConstant[ChPT2[4],10,___]=0;
UCouplingConstant[ChPT2[4],11,___]=0;
UCouplingConstant[ChPT2[4],12,___]=0;*)

(* ************************************************************** *)

(* The covariant derivative *)

CovariantFieldDerivative[aa_,x_,{loris__},rest___] :=
CovariantFieldDerivative[aa,x,##,rest]&@@
HighEnergyPhysics`FeynCalc`LorentzIndex`LorentzIndex/@{loris};

(* -------------------------------------------------------------- *)

(* Standard ChPT - Donoghue, Golowich, Holstein *)

CovariantFieldDerivative[aa_,x_,
lori_HighEnergyPhysics`FeynCalc`LorentzIndex`LorentzIndex,
ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)] :=

FieldDerivative[aa,x,lori] +

I*NM[UGeneratorMatrixIsoDotFull[QuantumField[Particle[
LeftComponent[0],ar,br],lori][x],opts],aa] -

I*NM[aa,UGeneratorMatrixIsoDotFull[QuantumField[Particle[
RightComponent[0],ar,br],lori][x],opts]];

(* ************************************************************** *)

(* Re-setting of options and $-variables *)

$UParticlesInUse={Pion,Scalar[0],
    Scalar[1],PseudoScalar[0],Vector[0],AxialVector[0]};

$PropagatorMassesStates={Pion[0]->{RenormalizationState[0]},
    Scalar[0]->{RenormalizationState[0]},
    Scalar[1]->{RenormalizationState[0]},
    PseudoScalar[0]->{RenormalizationState[0]},
    Vector[0]->{RenormalizationState[0]},
    AxialVector[0]->{RenormalizationState[0]}};

$CouplingIsoIndicesSpecifications =
   {Pion[0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}},
    Scalar[0][0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}},
    Scalar[1][0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}},
    PseudoScalar[0][0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}},
    Vector[0][0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}},
    AxialVector[0][0]->{{IsoRange->{1,2,3},IsoIndicesString->"I"}}};
   
(* FeynArts does not appear to accept other mixing fields than VS *)

$MixingFields=
   {};
   
(* Switch to Majorana fields *)

(*SelfConjugation[Vector[0]]:=False;*)

$InsertOnly=
   {Vector[0][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External},
   AxialVector[0][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External},
   Scalar[0][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External},
   Scalar[1][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External},
   PseudoScalar[0][0]->{
   HighEnergyPhysics`FeynArts`Incoming,
   HighEnergyPhysics`FeynArts`Outgoing,
   HighEnergyPhysics`FeynArts`External}};
    
(* ************************************************************** *)
