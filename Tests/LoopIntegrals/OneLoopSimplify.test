

(* :Title: OneLoopSimplify.test 	                                        *)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2018 Rolf Mertig
	Copyright (C) 1997-2018 Frederik Orellana
	Copyright (C) 2014-2018 Vladyslav Shtabovenko
*)

(* :Summary:  Framework independent unit tests for OneLoopSimplify			*)

(* ------------------------------------------------------------------------ *)

Tests`LoopIntegrals`fcstOneLoopSimplify = {

{"fcstOneLoopSimplify-ID1","
MatchQ[OneLoopSimplify[Isolate[(a + b + c + d) FVD[p, mu] FVD[p, nu] *
FAD[p, {p, m}] + (e + f + g) FVD[p, mu] FVD[p, nu] FAD[{p, m}], p],p],
(1/D) FeynAmpDenominator[PropagatorDenominator[Momentum[p, D], m]] (m^2 HoldForm[_] +
HoldForm[_]) Pair[LorentzIndex[mu, D], LorentzIndex[nu, D]]]","True"},
{"fcstOneLoopSimplify-ID2",
"OneLoopSimplify[(m GSD[p + q].GSD[p] + SPD[p, p] GSD[p]) FAD[p, {p + q, m}], p] // FCE",
"1/2 FAD[{p, m}] (m - 2 GSD[q])+1/2 m FAD[p, {p - q, m}] (m^2 - SPD[q, q])"},
{"fcstOneLoopSimplify-ID3",
"OneLoopSimplify[FAD[{p, m}] + X, p]//FCE",
"X + FAD[{p, m}]"},
{"fcstOneLoopSimplify-ID4",
"OneLoopSimplify[FVD[p, mu] FAD[{p, m}] + X, p] // FCE",
"X"},
{"fcstOneLoopSimplify-ID5",
"OneLoopSimplify[FVD[p, mu] FVD[p, nu] FAD[{p, m}] + X, p] // FCE",
"X + (m^2 FAD[{p, m}] MTD[mu, nu])/D"},
{"fcstOneLoopSimplify-ID6",
"OneLoopSimplify[SPD[l, q] FAD[l, l - p + q], l] // FCE",
"1/2 FAD[l, l - p + q] (SPD[p, q] - SPD[q, q])"},
{"fcstOneLoopSimplify-ID7",
"OneLoopSimplify[FVD[p, i] SPD[p, k] FAD[{p}, {p, m}], p] // FCE",
"(FAD[{p, m}] FVD[k, i])/D"},
{"fcstOneLoopSimplify-ID8",
"OneLoopSimplify[FVD[p, i] FVD[p, j] FAD[{p}, {p, m}], p] // FCE",
"(FAD[{p, m}] MTD[i, j])/D"},
{"fcstOneLoopSimplify-ID9",
" OneLoopSimplify[
GAD[mu].(1/2 Fal (1 - GA[5]) +
	1/2 FalCC (1 + GA[5])).(1/2 Mcc (1 - GA[5]) +
	1/2 M (1 + GA[5]) + GSD[k - p]).GAD[
	nu].(1/2 Fbe (1 - GA[5]) + 1/2 FbeCC (1 + GA[5])) FAD[{k - p,
	mF}, {k, mV},
	k] (-FVD[k, mu] FVD[k, nu] + MTD[mu, nu] SPD[k, k]), k] // FCE",
"((2 - D)*(FalCC*FbeCC*GSD[p] . GA[6] + Fal*Fbe*GSD[p] . GA[7])*FAD[{k, mF}])/(2*SPD[p, p]) -
((FalCC*FbeCC*GSD[p] . GA[6] + Fal*Fbe*GSD[p] . GA[7])*FAD[k, {k - p, mF}]*(mF^2 - SPD[p, p])^2)/(2*mV^2*SPD[p, p]) +
((FalCC*FbeCC*GSD[p] . GA[6] + Fal*Fbe*GSD[p] . GA[7])*FAD[{k, mV}]*(mF^2 - 2*mV^2 + D*mV^2 - SPD[p, p]))/(2*mV^2*SPD[p, p]) +
(FAD[{k, mF}, {k - p, mV}]*(FalCC*FbeCC*mF^4*GSD[p] . GA[6] - 3*FalCC*FbeCC*mF^2*mV^2*GSD[p] . GA[6] +
	D*FalCC*FbeCC*mF^2*mV^2*GSD[p] . GA[6] + 2*FalCC*FbeCC*mV^4*GSD[p] . GA[6] - D*FalCC*FbeCC*mV^4*GSD[p] . GA[6] +
	Fal*Fbe*mF^4*GSD[p] . GA[7] - 3*Fal*Fbe*mF^2*mV^2*GSD[p] . GA[7] + D*Fal*Fbe*mF^2*mV^2*GSD[p] . GA[7] +
	2*Fal*Fbe*mV^4*GSD[p] . GA[7] - D*Fal*Fbe*mV^4*GSD[p] . GA[7] - 2*FalCC*FbeCC*mF^2*GSD[p] . GA[6]*SPD[p, p] -
	3*FalCC*FbeCC*mV^2*GSD[p] . GA[6]*SPD[p, p] + D*FalCC*FbeCC*mV^2*GSD[p] . GA[6]*SPD[p, p] -
	2*Fal*Fbe*mF^2*GSD[p] . GA[7]*SPD[p, p] - 3*Fal*Fbe*mV^2*GSD[p] . GA[7]*SPD[p, p] + D*Fal*Fbe*mV^2*GSD[p] . GA[7]*SPD[p, p] -
	2*Fal*FbeCC*Mcc*mV^2*GA[6]*SPD[p, p] + 2*D*Fal*FbeCC*Mcc*mV^2*GA[6]*SPD[p, p] - 2*FalCC*Fbe*M*mV^2*GA[7]*SPD[p, p] +
	2*D*FalCC*Fbe*M*mV^2*GA[7]*SPD[p, p] + FalCC*FbeCC*GSD[p] . GA[6]*SPD[p, p]^2 + Fal*Fbe*GSD[p] . GA[7]*SPD[p, p]^2))/
(2*mV^2*SPD[p, p])"}
}
