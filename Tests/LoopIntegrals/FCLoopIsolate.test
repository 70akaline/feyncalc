

(* :Title: FCLoopIsolate.test                                              	    *)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2016 Rolf Mertig
	Copyright (C) 1997-2016 Frederik Orellana
	Copyright (C) 2014-2016 Vladyslav Shtabovenko
*)

(* :Summary:  Framework independent unit tests for FCLoopIsolate	  		*)

(* ------------------------------------------------------------------------ *)

Tests`LoopIntegrals`fcstFCLoopIsolate = {

{"fcstFCLoopIsolate-ID1","FCLoopIsolate[x, {q}]","x"},
{"fcstFCLoopIsolate-ID2","FCLoopIsolate[x+y, {q}]","x+y"},
{"fcstFCLoopIsolate-ID3","FCLoopIsolate[q , {q}]",
	"FCGV[\"LoopInt\"][q]"},
{"fcstFCLoopIsolate-ID4","FCLoopIsolate[x q , {q}]",
	"x*FCGV[\"LoopInt\"][q]"},
{"fcstFCLoopIsolate-ID5","FCLoopIsolate[q x + y, {q}]",
	"y + x*FCGV[\"LoopInt\"][q]"},
{"fcstFCLoopIsolate-ID6","FCLoopIsolate[q x + z (q + y), {q}]",
	"y*z + (x + z)*FCGV[\"LoopInt\"][q]"},
{"fcstFCLoopIsolate-ID7","FCLoopIsolate[q x + z (q + y) + GS[q], {q}]",
	"y*z + (x + z)*FCGV[\"LoopInt\"][q] + FCGV[\"LoopInt\"][DiracGamma[Momentum[q]]]"},
{"fcstFCLoopIsolate-ID8","FCLoopIsolate[q x + z (q + y) + d GS[q], {q}, ExceptHeads -> {GS}]",
	"y*z + (x + z)*FCGV[\"LoopInt\"][q] + d*FCGV[\"LoopInt\"][DiracGamma[Momentum[q]]]"},
{"fcstFCLoopIsolate-ID9","FCLoopIsolate[FCLoopIsolate[q x + z (q + y) + d GS[q], {q},
ExceptHeads -> {GS}], {q}, Head -> ll]",
	"y*z + (x + z)*ll[q] + d*ll[DiracGamma[Momentum[q]]]"},
{"fcstFCLoopIsolate-ID10","MatchQ[FCLoopIsolate[q (x + y), {q}, Head -> ll, Isolate -> True],
HoldForm[KK[_]] ll[q]]","True"},
{"fcstFCLoopIsolate-ID11","FCLoopIsolate[
	GA[j].(GSD[i].FVD[q, i] + GSD[p]).GA[5] FAD[{q, m}], {q}] // FCE","GA[j].GSD[p].GA[5] FCGV[\"LoopInt\"][FAD[{q, m}]] +
	GA[j].GSD[i].GA[5] FCGV[\"LoopInt\"][FAD[{q, m}] FVD[q, i]]"},
{"fcstFCLoopIsolate-ID12","FCLoopIsolate[ SUNT[i].(x + y).SUNT[j] +
	(GS[x] + GA[j].(GSD[i] FVD[q, i] + GSD[p]).GA[5]).SUNT[a] FAD[{q, m}], {q}] // FCE",
	"SUNT[i] . (x + y) . SUNT[j] + (GA[j] . GSD[p] . GA[5] + GS[x])*SUNT[a]*
FCGV[\"LoopInt\"][FAD[{q, m}]] + GA[j] . GSD[i] . GA[5]*SUNT[a]*
FCGV[\"LoopInt\"][FAD[{q, m}]*FVD[q, i]]"},
{"fcstFCLoopIsolate-ID12","FCLoopIsolate[(GS[x] +
	GA[j].(GSD[i] FVD[q, i] + GSD[p] + GSD[q + x]).GA[5]).SUNT[
	a] FAD[{q, m}], {q}] // FCE","(GA[j] . GSD[p] . GA[5] + GA[j] . GSD[x] . GA[5] + GS[x])*SUNT[a]*
FCGV[\"LoopInt\"][FAD[{q, m}]] +
SUNT[a]*FCGV[\"LoopInt\"][GA[j] . GSD[q] . GA[5]*FAD[{q, m}]] +
GA[j] . GSD[i] . GA[5]*SUNT[a]*FCGV[\"LoopInt\"][FAD[{q, m}]*FVD[q, i]]"},
{"fcstFCLoopIsolate-ID13","FCLoopIsolate[GSD[p + q] FAD[{q, m}], {q}] // FCE",
	"GSD[p] FCGV[\"LoopInt\"][FAD[{q, m}]] + FCGV[\"LoopInt\"][FAD[{q, m}] GSD[q]]"},
{"fcstFCLoopIsolate-ID14","FCLoopIsolate[
	a FAD[{q1, m}, {q3, m}] + b FAD[{q1, m1}, {q1 - q2, m2}] +
	c FAD[{q1, m}] + d FAD[{q2, m}], {q1, q2}, MultiLoop -> True,
	Head -> TT]//FCE","c*FAD[{q1, m}] + d*FAD[{q2, m}] + a*FAD[{q1, m}]*FAD[{q3, m}] + b*TT[FAD[{q1, m1}, {q1 - q2, m2}]]"},
{"fcstFCLoopIsolate-ID15","FCLoopIsolate[
	FCLoopIsolate[a FAD[{q1, m}, {q3, m}] +
	b FAD[{q1, m1}, {q1 - q2, m2}] + c FAD[{q1, m}] +
	d FAD[{q2, m}], {q1, q2}, MultiLoop -> True, Head -> TT], {q1, q3},
	MultiLoop -> True, Head -> TT2]//FCE","c*FAD[{q1, m}] + d*FAD[{q2, m}] + b*TT[FAD[{q1, m1}, {q1 - q2, m2}]] + a*TT2[FAD[{q1, m}]*FAD[{q3, m}]]"},
{"fcstFCLoopIsolate-ID16","FCLoopIsolate[x*A0[m^2], {q}, PaVe -> False]","x*A0[m^2]"},
{"fcstFCLoopIsolate-ID17","FCLoopIsolate[x*A0[m^2], {q}]","x FCGV[\"LoopInt\"][A0[m^2]]"},
{"fcstFCLoopIsolate-ID17","FCLoopIsolate[SPD[q + k, p + l] FAD[{q, m}], {q}] // FCE","FCGV[\"LoopInt\"][FAD[{q, m}] SPD[l + p, k + q]]"},
{"fcstFCLoopIsolate-ID18","FCLoopIsolate[SPD[q + k, p + l] FAD[{q, m}], {q},ExpandScalarProduct -> True] // FCE",
"(SPD[k, l] + SPD[k, p]) FCGV[\"LoopInt\"][FAD[{q, m}]] + FCGV[\"LoopInt\"][FAD[{q, m}] SPD[l, q]] + FCGV[\"LoopInt\"][FAD[{q, m}] SPD[p, q]]"},
{"fcstFCLoopIsolate-ID19","FCLoopIsolate[a FCI[FAD[{q, 0, 2}]] + b FCI[FAD[{q, 0, 1}]], {q},
Head -> loop, FCLoopIBPReducableQ -> True] // FCE","b FAD[q] + a loop[FAD[q, q]]"},
{"fcstFCLoopIsolate-ID20","FCLoopIsolate[Foobar[x], {}, PaVeIntegralHeads -> Join[OptionValue[FCLoopIsolate, PaVeIntegralHeads],
{Foobar}],Head -> loop]","loop[Foobar[x]]"},
{"fcstFCLoopIsolate-ID21","FCLoopIsolate[CSP[q, p] x + z (q + y) + CGS[q], {q}, Head -> loop]","y z + z loop[q] + x loop[CPair[CMomentum[p], CMomentum[q]]] +
loop[DiracGamma[CMomentum[q]]]"}
};
