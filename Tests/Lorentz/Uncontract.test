

(* :Title: Uncontract.test                                                  *)

(* This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2016 Rolf Mertig
	Copyright (C) 1997-2016 Frederik Orellana
	Copyright (C) 2014-2016 Vladyslav Shtabovenko
*)

(* :Summary:  Framework independent unit tests for Unconctract	        *)

(* ------------------------------------------------------------------------ *)

Tests`Lorentz`fcstUncontract = {
{"fcstUncontract-ID1","(Uncontract[LeviCivita[mu, nu][p, q], p] //FCRenameDummyIndices) /. {$AL[_] -> rho}",
	"Eps[LorentzIndex[mu], LorentzIndex[nu], LorentzIndex[rho], Momentum[q]]*Pair[LorentzIndex[rho], Momentum[p]]"},
{"fcstUncontract-ID2","(Uncontract[DiracSlash[p], p, Pair -> All] // FCRenameDummyIndices) /. {$AL[_] -> mu}",
	"DiracGamma[LorentzIndex[mu]]*Pair[LorentzIndex[mu], Momentum[p]]"},
{"fcstUncontract-ID3","(Uncontract[DiracSlash[p], p] // FCRenameDummyIndices) /. {$AL[_] -> mu}",
	"DiracGamma[LorentzIndex[mu]]*Pair[LorentzIndex[mu], Momentum[p]]"},
{"fcstUncontract-ID4","(Uncontract[LeviCivita[mu, nu][p, q], p, q]) /. {Eps[LorentzIndex[mu],
	LorentzIndex[nu], LorentzIndex[a_], LorentzIndex[b_]]*Pair[LorentzIndex[b_], Momentum[q]]*
	Pair[LorentzIndex[a_], Momentum[p]] ->  Eps[LorentzIndex[mu], LorentzIndex[nu], LorentzIndex[rho],
	LorentzIndex[sigma]]*Pair[LorentzIndex[sigma], Momentum[q]]* Pair[LorentzIndex[rho], Momentum[p]]}",
	"Eps[LorentzIndex[mu], LorentzIndex[nu], LorentzIndex[rho], LorentzIndex[sigma]]*Pair[LorentzIndex[rho], Momentum[p]]*
	Pair[LorentzIndex[sigma], Momentum[q]]"},
{"fcstUncontract-ID5","Uncontract[SP[p, w] , p]1",
	"Pair[Momentum[p], Momentum[w]]"},
{"fcstUncontract-ID6","(Uncontract[SP[p, w] , p, Pair -> All] //
	FCRenameDummyIndices) /. {$AL[_] -> mu}",
	"Pair[LorentzIndex[mu], Momentum[p]]*Pair[LorentzIndex[mu], Momentum[w]]"},
{"fcstUncontract-ID7","Uncontract[SP[p, w]^2 , p, Pair -> All] /. {Pair[LorentzIndex[a_],
	Momentum[p]]*Pair[LorentzIndex[a_], Momentum[w]]* Pair[LorentzIndex[b_], Momentum[p]]*
	Pair[LorentzIndex[b_], Momentum[w]] -> Pair[LorentzIndex[mu], Momentum[p]]* Pair[LorentzIndex[mu],
	Momentum[w]]* Pair[LorentzIndex[nu], Momentum[p]]* Pair[LorentzIndex[nu], Momentum[w]]}",
	"Pair[LorentzIndex[mu], Momentum[p]]*Pair[LorentzIndex[mu], Momentum[w]]*Pair[LorentzIndex[nu], Momentum[p]]*
	Pair[LorentzIndex[nu], Momentum[w]]"},
{"fcstUncontract-ID8","MatchQ[Pair[Momentum[p], Momentum[Polarization[p, I]]] //
	Uncontract[#, p, Pair -> {p}] &, Pair[LorentzIndex[a_], LorentzIndex[b_]]*
	Pair[LorentzIndex[a_], Momentum[p]]*Pair[LorentzIndex[b_], Momentum[Polarization[p, I]]]]","True"},
{"fcstUncontract-ID9","MatchQ[-Eps[LorentzIndex[nu], LorentzIndex[rho], LorentzIndex[si],
	Momentum[Polarization[p, I]]] // Uncontract[#,p] &,
	-(Eps[LorentzIndex[nu], LorentzIndex[rho], LorentzIndex[si], LorentzIndex[a_]]*
	Pair[LorentzIndex[a_], Momentum[Polarization[p, I]]])]","True"},
{"fcstUncontract-ID10","MatchQ[Uncontract[FCI[GS[p + q + l]], l, Pair -> All] // FCE,
	GS[p] + GS[q] + DiracGamma[LorentzIndex[x_]] Pair[LorentzIndex[x_], Momentum[l]]]","True"},
{"fcstUncontract-ID11","MatchQ[Uncontract[ExpandScalarProduct[SP[q + p, a + b]], q,
Pair -> All] // FCE,
Pair[LorentzIndex[x_], Momentum[a]] Pair[LorentzIndex[x_],
	Momentum[q]] +
Pair[LorentzIndex[y_], Momentum[b]] Pair[LorentzIndex[y_],
	Momentum[q]] + SP[a, p] + SP[b, p]]","True"},
{"fcstUncontract-ID11","DataType[mytensor, FCTensor] = True; \n
MatchQ[Uncontract[mytensor[Momentum[x], Momentum[y]]^3, x, y,
Pair -> All],
FCI[FV[x, i1_] FV[x, i2_]] FCI[FV[x, i3_]] FCI[
	FV[y, j1_] FV[y, j2_]] FCI[FV[y, j3_]]
mytensor[LorentzIndex[i1_], LorentzIndex[j1_]] mytensor[
	LorentzIndex[i2_], LorentzIndex[j2_]]
mytensor[LorentzIndex[i3_], LorentzIndex[j3_]] /;
i1 =!= i2 && i2 =!= i3 && j1 =!= j2 && j2 =!= j3]","True"},
{"fcstUncontract-ID12","MatchQ[Uncontract[SP[x, y]^3, x, y, Pair -> All],
FCI[FV[x, i1_] FV[x, i2_]] FCI[FV[x, i3_]] FCI[
	FV[y, i1_] FV[y, i2_]] FCI[FV[y, i3_]] /; i1 =!= i2 && i2 =!= i3]","True"}
};
